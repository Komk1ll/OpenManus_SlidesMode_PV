#!/usr/bin/env python3
"""
Isolated test for GenerateStructureTool language detection and prompt generation
"""

import re
import json


class GenerateStructureToolTest:
    """Isolated test version of GenerateStructureTool"""
    
    def _detect_language(self, text: str) -> str:
        """Detect if text contains Cyrillic characters (Russian) or is English"""
        # Check for Cyrillic characters
        cyrillic_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
        if cyrillic_pattern.search(text):
            return "russian"
        return "english"

    def _get_language_specific_prompt(self, topic: str, description: str, language: str) -> str:
        """Generate language-specific prompt for structure generation"""
        
        if language == "russian":
            return f"""–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É: "{topic}"
{f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {description}" if description else ""}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
    "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
    "slides": [
        {{
            "id": 1,
            "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
            "description": "–ß—Ç–æ –æ—Å–≤–µ—â–∞–µ—Ç —ç—Ç–æ—Ç —Å–ª–∞–π–¥",
            "type": "intro|content|conclusion",
            "keywords": ["–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ1", "–∫–ª—é—á–µ–≤–æ–µ_—Å–ª–æ–≤–æ2"],
            "image_type": "professional|general|technical",
            "image_query": "–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        }}
    ]
}}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–∑–¥–∞–π—Ç–µ 8-12 —Å–ª–∞–π–¥–æ–≤ –≤—Å–µ–≥–æ
- –í–∫–ª—é—á–∏—Ç–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–∞–π–¥—ã –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ö–∞–∂–¥—ã–π —Å–ª–∞–π–¥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —á–µ—Ç–∫—É—é —Ü–µ–ª—å
- –í–∫–ª—é—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã —Ç–µ–º—ã
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –ø–æ–º–æ—á—å —Å –ø–æ–∏—Å–∫–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- –û–±–µ—Å–ø–µ—á—å—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫ –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—é
- –î–æ–±–∞–≤—å—Ç–µ image_type: "professional" –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è/–∑–∞–∫–ª—é—á–µ–Ω–∏—è, "general" –¥–ª—è –æ–±—â–∏—Ö —Ç–µ–º, "technical" –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ª–∞–π–¥–æ–≤
- –î–æ–±–∞–≤—å—Ç–µ image_query –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        else:
            return f"""Create a comprehensive presentation structure for the topic: "{topic}"
{f"Additional context: {description}" if description else ""}

Generate a JSON structure with the following format:
{{
    "title": "Presentation Title",
    "description": "Brief description of the presentation",
    "slides": [
        {{
            "id": 1,
            "title": "Slide Title",
            "description": "What this slide covers",
            "type": "intro|content|conclusion",
            "keywords": ["keyword1", "keyword2"],
            "image_type": "professional|general|technical",
            "image_query": "image search query"
        }}
    ]
}}

Requirements:
- Create 8-12 slides total
- Include introduction, main content slides, and conclusion
- Each slide should have a clear purpose
- Include current aspects and specific sections of the topic
- Keywords should help with image search
- Ensure logical flow and progression
- Add image_type: "professional" for intro/conclusion, "general" for general topics, "technical" for technical slides
- Add image_query for more precise image search

Return only the JSON structure, no additional text."""


def test_language_detection():
    """Test language detection functionality"""
    print("üß™ Testing language detection...")
    
    tool = GenerateStructureToolTest()
    
    # Test Russian detection
    russian_text = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º –º–∏—Ä–µ"
    detected_lang = tool._detect_language(russian_text)
    assert detected_lang == "russian", f"Expected 'russian', got '{detected_lang}'"
    print("‚úÖ Russian language detection works")
    
    # Test English detection
    english_text = "Artificial Intelligence in Modern World"
    detected_lang = tool._detect_language(english_text)
    assert detected_lang == "english", f"Expected 'english', got '{detected_lang}'"
    print("‚úÖ English language detection works")
    
    # Test mixed text (should detect Russian if any Cyrillic present)
    mixed_text = "AI and –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    detected_lang = tool._detect_language(mixed_text)
    assert detected_lang == "russian", f"Expected 'russian' for mixed text, got '{detected_lang}'"
    print("‚úÖ Mixed text detection works (prioritizes Russian)")
    
    return True


def test_prompt_generation():
    """Test prompt generation for different languages"""
    print("üß™ Testing prompt generation...")
    
    tool = GenerateStructureToolTest()
    
    # Test Russian prompt
    russian_topic = "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    russian_desc = "–û–±–∑–æ—Ä –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ò–ò"
    russian_prompt = tool._get_language_specific_prompt(russian_topic, russian_desc, "russian")
    
    assert "–°–æ–∑–¥–∞–π—Ç–µ –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É" in russian_prompt, "Russian prompt should be in Russian"
    assert russian_topic in russian_prompt, "Topic should be in prompt"
    assert russian_desc in russian_prompt, "Description should be in prompt"
    assert "image_type" in russian_prompt, "Prompt should include image_type field"
    assert "image_query" in russian_prompt, "Prompt should include image_query field"
    print("‚úÖ Russian prompt generation works")
    
    # Test English prompt
    english_topic = "Artificial Intelligence"
    english_desc = "Overview of AI applications"
    english_prompt = tool._get_language_specific_prompt(english_topic, english_desc, "english")
    
    assert "Create a comprehensive presentation" in english_prompt, "English prompt should be in English"
    assert english_topic in english_prompt, "Topic should be in prompt"
    assert english_desc in english_prompt, "Description should be in prompt"
    assert "image_type" in english_prompt, "Prompt should include image_type field"
    assert "image_query" in english_prompt, "Prompt should include image_query field"
    print("‚úÖ English prompt generation works")
    
    return True


def test_json_structure_requirements():
    """Test that prompts include all required JSON structure elements"""
    print("üß™ Testing JSON structure requirements...")
    
    tool = GenerateStructureToolTest()
    
    # Test Russian prompt structure
    russian_prompt = tool._get_language_specific_prompt("–¢–µ—Å—Ç", "", "russian")
    required_fields = ["title", "description", "slides", "id", "keywords", "image_type", "image_query"]
    
    for field in required_fields:
        assert field in russian_prompt, f"Russian prompt missing required field: {field}"
    
    print("‚úÖ Russian prompt includes all required JSON fields")
    
    # Test English prompt structure
    english_prompt = tool._get_language_specific_prompt("Test", "", "english")
    
    for field in required_fields:
        assert field in english_prompt, f"English prompt missing required field: {field}"
    
    print("‚úÖ English prompt includes all required JSON fields")
    
    return True


def main():
    """Run all tests"""
    print("üöÄ Starting isolated GenerateStructureTool tests...\n")
    
    tests = [
        ("Language Detection", test_language_detection),
        ("Prompt Generation", test_prompt_generation),
        ("JSON Structure Requirements", test_json_structure_requirements),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Running: {test_name}")
        print(f"{'='*50}")
        
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Test {test_name} crashed: {str(e)}")
            results.append((test_name, False))
    
    # Summary
    print(f"\n{'='*50}")
    print("TEST SUMMARY")
    print(f"{'='*50}")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if success:
            passed += 1
    
    print(f"\nResults: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ All GenerateStructureTool logic tests passed!")
        return True
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the issues above.")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

