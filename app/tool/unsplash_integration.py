#!/usr/bin/env python3
"""
Unsplash API Integration
–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Unsplash API –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""

import requests
import json
import time
from typing import List, Dict, Any, Optional
from urllib.parse import urlencode

class UnsplashService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Unsplash API"""
    
    def __init__(self, access_key: str = None):
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–µ–Ω –Ω–∞—Å—Ç–æ—è—â–∏–π API –∫–ª—é—á
        self.access_key = access_key or "demo_key"
        self.base_url = "https://api.unsplash.com"
        
        # –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        self.professional_images = {
            'technology': [
                "https://images.unsplash.com/photo-1518186285589-2f7649de83e0?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1551434678-e076c223a692?w=800&h=600&fit=crop&auto=format"
            ],
            'business': [
                "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1556761175-b413da4baf72?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1521737604893-d14cc237f11d?w=800&h=600&fit=crop&auto=format"
            ],
            'healthcare': [
                "https://images.unsplash.com/photo-1576091160399-112ba8d25d1f?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1559757148-5c350d0d3c56?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1582750433449-648ed127bb54?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1584432810601-6c7f27d2362b?w=800&h=600&fit=crop&auto=format"
            ],
            'finance': [
                "https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800&h=600&fit=crop&auto=format"
            ],
            'education': [
                "https://images.unsplash.com/photo-1481627834876-b7833e8f5570?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1523240795612-9a054b0db644?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1434030216411-0b793f4b4173?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1513475382585-d06e58bcb0e0?w=800&h=600&fit=crop&auto=format"
            ],
            'environment': [
                "https://images.unsplash.com/photo-1441974231531-c6227db76b6e?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1473773508845-188df298d2d1?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1466611653911-95081537e5b7?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1518837695005-2083093ee35b?w=800&h=600&fit=crop&auto=format"
            ],
            'security': [
                "https://images.unsplash.com/photo-1563206767-5b18f218e8de?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1555949963-aa79dcee981c?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1550751827-4bd374c3f58b?w=800&h=600&fit=crop&auto=format",
                "https://images.unsplash.com/photo-1614064641938-3bbee52942c7?w=800&h=600&fit=crop&auto=format"
            ]
        }
    
    def categorize_query(self, query: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        query_lower = query.lower()
        
        if any(word in query_lower for word in ['—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–¥', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–∏–Ω—Ç–µ—Ä–Ω–µ—Ç']):
            return 'technology'
        elif any(word in query_lower for word in ['–±–∏–∑–Ω–µ—Å', '–æ—Ñ–∏—Å', '—Ä–∞–±–æ—Ç–∞', '–∫–æ–º–∞–Ω–¥–∞', '–≤—Å—Ç—Ä–µ—á–∞', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è']):
            return 'business'
        elif any(word in query_lower for word in ['–º–µ–¥–∏—Ü–∏–Ω–∞', '–∑–¥–æ—Ä–æ–≤—å–µ', '–≤—Ä–∞—á', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ª–µ—á–µ–Ω–∏–µ']):
            return 'healthcare'
        elif any(word in query_lower for word in ['—Ñ–∏–Ω–∞–Ω—Å—ã', '–¥–µ–Ω—å–≥–∏', '–±–∞–Ω–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '—ç–∫–æ–Ω–æ–º–∏–∫–∞']):
            return 'finance'
        elif any(word in query_lower for word in ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–æ–±—É—á–µ–Ω–∏–µ', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '—Å—Ç—É–¥–µ–Ω—Ç']):
            return 'education'
        elif any(word in query_lower for word in ['—ç–∫–æ–ª–æ–≥–∏—è', '–ø—Ä–∏—Ä–æ–¥–∞', '–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞', '–∑–µ–ª–µ–Ω—ã–π', '—ç–Ω–µ—Ä–≥–∏—è']):
            return 'environment'
        elif any(word in query_lower for word in ['–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–∑–∞—â–∏—Ç–∞', '–∫–∏–±–µ—Ä', '—Ö–∞–∫–µ—Ä', '—É–≥—Ä–æ–∑–∞']):
            return 'security'
        else:
            return 'business'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def search_professional_image(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            category = self.categorize_query(query)
            images = self.professional_images.get(category, self.professional_images['business'])
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            import random
            return random.choice(images)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Unsplash: {e}")
            return None
    
    def get_image_info(self, image_url: str) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        return {
            'url': image_url,
            'width': 800,
            'height': 600,
            'format': 'JPEG',
            'source': 'Unsplash'
        }

class EnhancedImageService:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    def __init__(self, tavily_api_key: str, unsplash_access_key: str = None):
        self.tavily_api_key = tavily_api_key
        self.unsplash_service = UnsplashService(unsplash_access_key)
    
    def search_tavily_image(self, query: str) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Tavily API –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º"""
        try:
            url = "https://api.tavily.com/search"
            payload = {
                "api_key": self.tavily_api_key,
                "query": f"{query} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ç–æ",
                "search_depth": "basic",
                "include_images": True,
                "max_results": 10
            }
            
            response = requests.post(url, json=payload, timeout=15)
            if response.status_code == 200:
                data = response.json()
                images = data.get('images', [])
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–∞—á–µ—Å—Ç–≤—É
                for img in images:
                    img_url = img.get('url', '')
                    if img_url and self._is_valid_image_url(img_url):
                        return img_url
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Tavily: {e}")
        
        return None
    
    def _is_valid_image_url(self, url: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not url:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        valid_extensions = ['.jpg', '.jpeg', '.png', '.webp']
        if not any(ext in url.lower() for ext in valid_extensions):
            return False
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω—ã
        blocked_domains = ['example.com', 'placeholder', 'dummy']
        if any(domain in url.lower() for domain in blocked_domains):
            return False
        
        return True
    
    def get_image_for_content(self, content_type: str, query: str, slide_type: str = "content") -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        print(f"üîç –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {query} (—Ç–∏–ø: {content_type})")
        
        # –î–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º Unsplash
        if content_type in ['professional', 'business', 'technology'] or slide_type == "title":
            image_url = self.unsplash_service.search_professional_image(query)
            if image_url:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Unsplash: {image_url[:50]}...")
                return image_url
        
        # –î–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º Tavily
        image_url = self.search_tavily_image(query)
        if image_url:
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ Tavily: {image_url[:50]}...")
            return image_url
        
        # Fallback –Ω–∞ Unsplash –µ—Å–ª–∏ Tavily –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        fallback_url = self.unsplash_service.search_professional_image(query)
        if fallback_url:
            print(f"‚úÖ Fallback Unsplash: {fallback_url[:50]}...")
            return fallback_url
        
        print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return None

def test_image_services():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    tavily_key = "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"
    
    service = EnhancedImageService(tavily_key)
    
    test_queries = [
        ("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "professional"),
        ("–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "security"),
        ("–±–ª–æ–∫—á–µ–π–Ω —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "technology"),
        ("–∑–µ–ª–µ–Ω–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞", "environment"),
        ("—Ü–∏—Ñ—Ä–æ–≤–∞—è —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è", "business")
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n")
    
    for query, content_type in test_queries:
        print(f"–ó–∞–ø—Ä–æ—Å: {query} ({content_type})")
        image_url = service.get_image_for_content(content_type, query)
        if image_url:
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {image_url}")
        else:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("-" * 50)

if __name__ == "__main__":
    test_image_services()

