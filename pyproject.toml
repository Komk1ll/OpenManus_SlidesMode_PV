[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "openmanus-slidesmode"
version = "2.0.0"
description = "OpenManus Presentation System - AI-powered slide generation"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "OpenManus Team", email = "team@openmanus.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    "pydantic~=2.10.6",
    "openai~=1.66.3",
    "tenacity~=9.0.0",
    "pyyaml~=6.0.2",
    "loguru~=0.7.3",
    "numpy",
    "datasets~=3.4.1",
    "fastapi~=0.115.11",
    "tiktoken~=0.9.0",
    "html2text~=2024.2.26",
    "gymnasium~=1.1.1",
    "pillow>=10.4,<12.0",
    "browsergym~=0.13.3",
    "uvicorn~=0.34.0",
    "unidiff~=0.7.5",
    "browser-use~=0.1.40",
    "googlesearch-python~=1.3.0",
    "baidusearch~=1.0.3",
    "duckduckgo_search~=7.5.3",
    "aiofiles~=24.1.0",
    "pydantic_core~=2.27.2",
    "colorama~=0.4.6",
    "playwright~=1.51.0",
    "docker~=7.1.0",
    "mcp~=1.5.0",
    "httpx>=0.27.0",
    "tomli>=2.0.0",
    "boto3~=1.37.18",
    "requests~=2.32.3",
    "beautifulsoup4~=4.13.3",
    "huggingface-hub~=0.29.2",
    "setuptools~=75.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest~=8.3.5",
    "pytest-asyncio~=0.25.3",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "ruff>=0.1.6",
    "mypy>=1.7.1",
    "types-requests",
    "types-PyYAML",
    "pre-commit>=3.5.0",
    "detect-secrets>=1.4.0",
]

[project.urls]
Homepage = "https://github.com/openmanus/slidesmode"
Repository = "https://github.com/openmanus/slidesmode"
Issues = "https://github.com/openmanus/slidesmode/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["app*"]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line too long, handled by black
    "B008",   # do not perform function calls in argument defaults
    "C901",   # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR2004", # magic value used in comparison
    "PLW2901", # redefined loop variable
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.isort]
known-first-party = ["app"]
force-sort-within-sections = true

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

# Ignore missing imports for third-party libraries
[[tool.mypy.overrides]]
module = [
    "browsergym.*",
    "browser_use.*",
    "googlesearch.*",
    "baidusearch.*",
    "duckduckgo_search.*",
    "crawl4ai.*",
    "mcp.*",
    "datasets.*",
    "gymnasium.*",
    "unidiff.*",
    "html2text.*",
    "tiktoken.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

