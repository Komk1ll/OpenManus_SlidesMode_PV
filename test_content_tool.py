#!/usr/bin/env python3
"""
Test script for enhanced GenerateSlideContentTool
"""

import json
import re


class GenerateSlideContentToolTest:
    """Isolated test version of GenerateSlideContentTool"""
    
    def _detect_language(self, text: str) -> str:
        """Detect if text contains Cyrillic characters (Russian) or is English"""
        cyrillic_pattern = re.compile(r'[–∞-—è—ë]', re.IGNORECASE)
        if cyrillic_pattern.search(text):
            return "russian"
        return "english"

    def _get_enhanced_prompt(self, slide_info: dict, presentation_topic: str, presentation_context: str, language: str) -> str:
        """Generate enhanced language-specific prompt for slide content generation"""
        
        slide_title = slide_info.get('title', '')
        slide_description = slide_info.get('description', '')
        slide_type = slide_info.get('type', 'content')
        keywords = slide_info.get('keywords', [])
        
        if language == "russian":
            return f"""–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.

–¢–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: {presentation_topic}
{f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {presentation_context}" if presentation_context else ""}

–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ª–∞–π–¥–µ:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫: {slide_title}
- –û–ø–∏—Å–∞–Ω–∏–µ: {slide_description}
- –¢–∏–ø: {slide_type}
- –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {', '.join(keywords) if keywords else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{{
    "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
    "subtitle": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
    "content": [
        {{
            "type": "bullet_point",
            "text": "–û—Å–Ω–æ–≤–Ω–æ–π –ø—É–Ω–∫—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏"
        }},
        {{
            "type": "paragraph", 
            "text": "–î–µ—Ç–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∏–ª–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏"
        }},
        {{
            "type": "quote",
            "text": "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏–ª–∏ –∏–∑ –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞",
            "author": "–ê–≤—Ç–æ—Ä —Ü–∏—Ç–∞—Ç—ã"
        }},
        {{
            "type": "code",
            "language": "python",
            "text": "# –ü—Ä–∏–º–µ—Ä –∫–æ–¥–∞, –µ—Å–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ –∫ —Ç–µ–º–µ\\nprint('–ü—Ä–∏–º–µ—Ä')"
        }}
    ],
    "notes": "–ó–∞–º–µ—Ç–∫–∏ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏"
}}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–∑–¥–∞–π—Ç–µ –≤—Å–µ–æ–±—ä–µ–º–ª—é—â–∏–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (bullet_point, paragraph, quote, code)
- –í–∫–ª—é—á–∏—Ç–µ 4-6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –Ω–∞ —Å–ª–∞–π–¥
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, –¥–∞–Ω–Ω—ã–µ, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
- –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ
- –í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ–º
- –°–¥–µ–ª–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º
- –î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏ –¥–æ–∫–ª–∞–¥—á–∏–∫–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º

–í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        else:
            return f"""Generate detailed content for a presentation slide.

Presentation Topic: {presentation_topic}
{f"Context: {presentation_context}" if presentation_context else ""}

Slide Information:
- Title: {slide_title}
- Description: {slide_description}
- Type: {slide_type}
- Keywords: {', '.join(keywords) if keywords else 'not specified'}

Generate content in the following JSON format:
{{
    "title": "Slide Title",
    "subtitle": "Optional subtitle",
    "content": [
        {{
            "type": "bullet_point",
            "text": "Main point with detailed explanation and specific facts"
        }},
        {{
            "type": "paragraph", 
            "text": "Detailed paragraph with concrete data, statistics, or examples"
        }},
        {{
            "type": "quote",
            "text": "Relevant quote from expert or authoritative source",
            "author": "Quote author"
        }},
        {{
            "type": "code",
            "language": "python",
            "text": "# Code example if relevant to topic\\nprint('Example')"
        }}
    ],
    "notes": "Speaker notes with additional context and specific facts"
}}

Requirements:
- Create comprehensive, informative content
- Use appropriate content types (bullet_point, paragraph, quote, code)
- Include 4-6 main points per slide
- Must include specific facts, data, statistics
- Add relevant expert quotes when applicable
- Include code examples for technical topics
- Make content engaging and professional
- Add speaker notes with additional context

Return only the JSON structure, no additional text."""


def test_language_detection():
    """Test language detection functionality"""
    print("üß™ Testing language detection...")
    
    tool = GenerateSlideContentToolTest()
    
    # Test Russian detection
    russian_slide = {"title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ –ò–ò", "description": "–û—Å–Ω–æ–≤—ã –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"}
    combined_text = f"{russian_slide['title']} –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
    detected_lang = tool._detect_language(combined_text)
    assert detected_lang == "russian", f"Expected 'russian', got '{detected_lang}'"
    print("‚úÖ Russian language detection works")
    
    # Test English detection
    english_slide = {"title": "Introduction to AI", "description": "Basics of artificial intelligence"}
    combined_text = f"{english_slide['title']} Artificial Intelligence"
    detected_lang = tool._detect_language(combined_text)
    assert detected_lang == "english", f"Expected 'english', got '{detected_lang}'"
    print("‚úÖ English language detection works")
    
    return True


def test_enhanced_prompt_features():
    """Test enhanced prompt features"""
    print("üß™ Testing enhanced prompt features...")
    
    tool = GenerateSlideContentToolTest()
    
    # Test Russian prompt with all features
    russian_slide = {
        "title": "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "description": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –º–µ—Ç–æ–¥—ã",
        "type": "content",
        "keywords": ["ML", "–∞–ª–≥–æ—Ä–∏—Ç–º—ã", "–¥–∞–Ω–Ω—ã–µ"]
    }
    
    russian_prompt = tool._get_enhanced_prompt(
        russian_slide, 
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", 
        "–û–±–∑–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –ò–ò", 
        "russian"
    )
    
    # Check for enhanced features in Russian prompt
    assert "quote" in russian_prompt, "Russian prompt should include quote type"
    assert "code" in russian_prompt, "Russian prompt should include code type"
    assert "–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã" in russian_prompt, "Russian prompt should require specific facts"
    assert "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" in russian_prompt, "Russian prompt should mention statistics"
    assert "4-6 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤" in russian_prompt, "Russian prompt should specify 4-6 points"
    assert "author" in russian_prompt, "Russian prompt should include author field for quotes"
    print("‚úÖ Russian enhanced prompt includes all required features")
    
    # Test English prompt with all features
    english_slide = {
        "title": "Machine Learning",
        "description": "Algorithms and methods",
        "type": "content",
        "keywords": ["ML", "algorithms", "data"]
    }
    
    english_prompt = tool._get_enhanced_prompt(
        english_slide, 
        "Artificial Intelligence", 
        "Overview of AI technologies", 
        "english"
    )
    
    # Check for enhanced features in English prompt
    assert "quote" in english_prompt, "English prompt should include quote type"
    assert "code" in english_prompt, "English prompt should include code type"
    assert "specific facts" in english_prompt, "English prompt should require specific facts"
    assert "statistics" in english_prompt, "English prompt should mention statistics"
    assert "4-6 main points" in english_prompt, "English prompt should specify 4-6 points"
    assert "author" in english_prompt, "English prompt should include author field for quotes"
    print("‚úÖ English enhanced prompt includes all required features")
    
    return True


def test_content_types_validation():
    """Test that prompts include all required content types"""
    print("üß™ Testing content types validation...")
    
    tool = GenerateSlideContentToolTest()
    
    slide_info = {
        "title": "Test Slide",
        "description": "Test description",
        "type": "content",
        "keywords": ["test"]
    }
    
    # Test both languages include all content types
    for language in ["russian", "english"]:
        prompt = tool._get_enhanced_prompt(slide_info, "Test Topic", "Test Context", language)
        
        required_types = ["bullet_point", "paragraph", "quote", "code"]
        for content_type in required_types:
            assert content_type in prompt, f"{language} prompt missing content type: {content_type}"
        
        # Check for required fields in JSON structure
        required_fields = ["title", "subtitle", "content", "notes"]
        for field in required_fields:
            assert field in prompt, f"{language} prompt missing JSON field: {field}"
        
        print(f"‚úÖ {language.capitalize()} prompt includes all content types and fields")
    
    return True


def test_json_structure_requirements():
    """Test JSON structure requirements in prompts"""
    print("üß™ Testing JSON structure requirements...")
    
    tool = GenerateSlideContentToolTest()
    
    slide_info = {
        "title": "Technical Slide",
        "description": "Technical content",
        "type": "content",
        "keywords": ["programming", "code"]
    }
    
    # Test that prompts specify proper JSON structure
    for language in ["russian", "english"]:
        prompt = tool._get_enhanced_prompt(slide_info, "Programming", "Code examples", language)
        
        # Check for JSON structure elements
        assert '"type":' in prompt, f"{language} prompt should show JSON type field"
        assert '"text":' in prompt, f"{language} prompt should show JSON text field"
        assert '"language":' in prompt, f"{language} prompt should show JSON language field for code"
        assert '"author":' in prompt, f"{language} prompt should show JSON author field for quotes"
        
        # Check for specific requirements
        if language == "russian":
            assert "JSON —Å—Ç—Ä—É–∫—Ç—É—Ä—É" in prompt, "Russian prompt should mention JSON structure"
            assert "–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞" in prompt, "Russian prompt should specify JSON only"
        else:
            assert "JSON structure" in prompt, "English prompt should mention JSON structure"
            assert "no additional text" in prompt, "English prompt should specify JSON only"
        
        print(f"‚úÖ {language.capitalize()} prompt has proper JSON structure requirements")
    
    return True


def main():
    """Run all tests"""
    print("üöÄ Starting enhanced GenerateSlideContentTool tests...\n")
    
    tests = [
        ("Language Detection", test_language_detection),
        ("Enhanced Prompt Features", test_enhanced_prompt_features),
        ("Content Types Validation", test_content_types_validation),
        ("JSON Structure Requirements", test_json_structure_requirements),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*50}")
        print(f"Running: {test_name}")
        print(f"{'='*50}")
        
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"‚ùå Test {test_name} crashed: {str(e)}")
            results.append((test_name, False))
    
    # Summary
    print(f"\n{'='*50}")
    print("TEST SUMMARY")
    print(f"{'='*50}")
    
    passed = 0
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} - {test_name}")
        if success:
            passed += 1
    
    print(f"\nResults: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("üéâ All GenerateSlideContentTool tests passed!")
        return True
    else:
        print("‚ö†Ô∏è Some tests failed. Please check the issues above.")
        return False


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)

