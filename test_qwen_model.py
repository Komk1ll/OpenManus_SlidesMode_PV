#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ qwen/qwen3-235b-a22b-thinking-2507
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ VPN-—Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import json
import logging
import sys
import time
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f"/home/ubuntu/openmanus_project/logs/qwen_experiment_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
Path("/home/ubuntu/openmanus_project/logs").mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

sys.path.append('/home/ubuntu/openmanus_project')

async def test_qwen_model():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å Qwen –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ VPN"""
    
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –º–æ–¥–µ–ª—å—é qwen/qwen3-235b-a22b-thinking-2507")
    logger.info("üìã –¢–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: –ó–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ VPN-—Å–µ—Ä–≤–µ—Ä–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù")
    
    start_time = time.time()
    
    try:
        # –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from app.tool.presentation_tools import (
            GenerateStructureTool,
            GenerateSlideContentTool,
            SearchImageTool,
            ExportPresentationTool
        )
        
        # –¢–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        topic = "–ó–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ VPN-—Å–µ—Ä–≤–µ—Ä–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù"
        slide_count = 8
        
        logger.info(f"üéØ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: '{topic}'")
        logger.info(f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–∞–π–¥–æ–≤: {slide_count}")
        
        # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        logger.info("üèóÔ∏è –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
        structure_tool = GenerateStructureTool()
        structure_result = await structure_tool.execute(
            topic=topic,
            slide_count=slide_count,
            language="auto"
        )
        
        if structure_result.error:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {structure_result.error}")
            return None
            
        structure = structure_result.output
        logger.info(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞: {len(structure['slides'])} —Å–ª–∞–π–¥–æ–≤")
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        for i, slide in enumerate(structure['slides'], 1):
            logger.info(f"   üìÑ –°–ª–∞–π–¥ {i}: {slide['title']}")
        
        # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
        logger.info("üìù –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–æ–≤...")
        content_tool = GenerateSlideContentTool()
        
        presentation = {
            "title": structure['title'],
            "description": structure.get('description', ''),
            "slides": [],
            "metadata": {
                "created_by": "OpenManus SlidesMode v2.0 + Qwen",
                "model": "qwen/qwen3-235b-a22b-thinking-2507",
                "topic": topic,
                "slide_count": len(structure['slides']),
                "language": structure.get('language', 'russian'),
                "created_at": datetime.now().isoformat()
            }
        }
        
        for i, slide_info in enumerate(structure['slides'], 1):
            logger.info(f"   üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–ª–∞–π–¥–∞ {i}: {slide_info['title']}")
            
            content_result = await content_tool.execute(
                slide_info=slide_info,
                presentation_topic=topic
            )
            
            if content_result.error:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞ {i}: {content_result.error}")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
                slide_content = {
                    "title": slide_info['title'],
                    "content": [{"type": "paragraph", "text": slide_info.get('description', '–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')}],
                    "notes": "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π"
                }
            else:
                slide_content = content_result.output
                logger.info(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥–∞ {i} —Å–æ–∑–¥–∞–Ω ({len(slide_content.get('content', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
            
            # –®–∞–≥ 3: –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞
            logger.info(f"   üñºÔ∏è –ü–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ {i}...")
            image_tool = SearchImageTool()
            
            image_result = await image_tool.execute(
                slide_title=slide_content['title'],
                slide_content=str(slide_content.get('content', [])),
                image_type="professional"
            )
            
            if image_result.error:
                logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–∞–π–¥–∞ {i}: {image_result.error}")
                image_url = None
            else:
                image_url = image_result.output
                logger.info(f"   ‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è —Å–ª–∞–π–¥–∞ {i}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–∞–π–¥ –≤ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
            slide_content['image_url'] = image_url
            presentation['slides'].append(slide_content)
        
        # –®–∞–≥ 4: –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏
        logger.info("üíæ –®–∞–≥ 4: –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
        export_tool = ExportPresentationTool()
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON
        json_result = await export_tool.execute(
            presentation=presentation,
            format="json",
            output_path="/home/ubuntu/openmanus_project/qwen_vpn_presentation.json"
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ HTML
        html_result = await export_tool.execute(
            presentation=presentation,
            format="html",
            output_path="/home/ubuntu/openmanus_project/qwen_vpn_presentation.html"
        )
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF
        pdf_result = await export_tool.execute(
            presentation=presentation,
            format="pdf",
            output_path="/home/ubuntu/openmanus_project/qwen_vpn_presentation.pdf"
        )
        
        end_time = time.time()
        total_time = end_time - start_time
        
        logger.info("üéâ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        logger.info(f"‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"üìÅ –§–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã:")
        logger.info(f"   üìÑ JSON: qwen_vpn_presentation.json")
        logger.info(f"   üåê HTML: qwen_vpn_presentation.html")
        logger.info(f"   üìã PDF: qwen_vpn_presentation.pdf")
        logger.info(f"   üìä –õ–æ–≥: {log_filename}")
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞
        logger.info("üìà –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏:")
        logger.info(f"   üìä –°–ª–∞–π–¥–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {len(presentation['slides'])}")
        
        content_types = {}
        for slide in presentation['slides']:
            for content_item in slide.get('content', []):
                content_type = content_item.get('type', 'unknown')
                content_types[content_type] = content_types.get(content_type, 0) + 1
        
        logger.info(f"   üìù –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_types}")
        
        images_found = sum(1 for slide in presentation['slides'] if slide.get('image_url'))
        logger.info(f"   üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: {images_found}/{len(presentation['slides'])}")
        
        return {
            "success": True,
            "presentation": presentation,
            "execution_time": total_time,
            "log_file": log_filename,
            "exports": {
                "json": json_result.output if not json_result.error else None,
                "html": html_result.output if not html_result.error else None,
                "pdf": pdf_result.output if not pdf_result.error else None
            }
        }
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        return {
            "success": False,
            "error": str(e),
            "log_file": log_filename
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å –º–æ–¥–µ–ª—å—é Qwen...")
    result = await test_qwen_model()
    
    if result and result.get("success"):
        print("\n‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {result['execution_time']:.2f} —Å–µ–∫")
        print(f"üìÅ –õ–æ–≥ —Ñ–∞–π–ª: {result['log_file']}")
    else:
        print("\n‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")
        if result:
            print(f"üìÅ –õ–æ–≥ —Ñ–∞–π–ª: {result['log_file']}")

if __name__ == "__main__":
    asyncio.run(main())

