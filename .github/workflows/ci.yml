name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

jobs:
  lint-and-type-check:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run Ruff linting
      run: |
        ruff check . --output-format=github

    - name: Run Ruff formatting check
      run: |
        ruff format --check .

    - name: Run MyPy type checking
      run: |
        mypy app/ --show-error-codes
      continue-on-error: true  # Type checking issues won't fail the build initially

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Run pytest with coverage
      run: |
        pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=20
      env:
        OPENAI_API_KEY: test-key-for-ci
        TAVILY_API_KEY: test-key-for-ci
        UNSPLASH_ACCESS_KEY: test-key-for-ci

    - name: Upload coverage reports to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety detect-secrets

    - name: Run Bandit security linter
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run Safety check for vulnerabilities
      run: |
        safety check --json --output safety-report.json || true

    - name: Run detect-secrets scan
      run: |
        detect-secrets scan --baseline .secrets.baseline

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  coverage-report:
    name: Generate Coverage Report
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"

    - name: Generate coverage report
      run: |
        pytest tests/ --cov=app --cov-report=html --cov-report=xml --cov-report=json
      env:
        OPENAI_API_KEY: test-key-for-ci
        TAVILY_API_KEY: test-key-for-ci
        UNSPLASH_ACCESS_KEY: test-key-for-ci

    - name: Upload coverage HTML report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-html-report
        path: htmlcov/

    - name: Upload coverage data
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: |
          coverage.xml
          coverage.json
          .coverage

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, test, security]
    if: always()

    steps:
    - name: Check job results
      run: |
        echo "Lint and Type Check: ${{ needs.lint-and-type-check.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [[ "${{ needs.lint-and-type-check.result }}" == "failure" ]]; then
          echo "❌ Linting or type checking failed"
          exit 1
        fi
        
        if [[ "${{ needs.test.result }}" == "failure" ]]; then
          echo "❌ Tests failed"
          exit 1
        fi
        
        echo "✅ Quality gate passed!"