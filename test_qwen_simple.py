#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏ qwen/qwen3-235b-a22b-thinking-2507
–¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ VPN-—Å–µ—Ä–≤–µ—Ä–µ
"""

import asyncio
import json
import logging
import sys
import time
import requests
from datetime import datetime
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_filename = f"/home/ubuntu/openmanus_project/logs/qwen_simple_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
Path("/home/ubuntu/openmanus_project/logs").mkdir(exist_ok=True)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename, encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_KEY = "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"
BASE_URL = "https://openrouter.ai/api/v1/"
MODEL = "qwen/qwen3-235b-a22b-thinking-2507"

async def call_qwen_api(prompt: str, max_tokens: int = 4000) -> str:
    """–í—ã–∑–æ–≤ API –º–æ–¥–µ–ª–∏ Qwen"""
    
    headers = {
        "Authorization": f"Bearer {API_KEY}",
        "Content-Type": "application/json"
    }
    
    data = {
        "model": MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ],
        "max_tokens": max_tokens,
        "temperature": 0.7
    }
    
    try:
        response = requests.post(f"{BASE_URL}chat/completions", headers=headers, json=data)
        response.raise_for_status()
        
        result = response.json()
        return result["choices"][0]["message"]["content"]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}"

async def generate_vpn_presentation():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –æ VPN-—Å–µ—Ä–≤–µ—Ä–µ —Å –ø–æ–º–æ—â—å—é Qwen"""
    
    logger.info("üöÄ –ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ —Å –º–æ–¥–µ–ª—å—é Qwen")
    start_time = time.time()
    
    # –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    logger.info("üèóÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    structure_prompt = """–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Ç–µ–º—É "–ó–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ VPN-—Å–µ—Ä–≤–µ—Ä–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- 8 —Å–ª–∞–π–¥–æ–≤
- –ö–∞–∂–¥—ã–π —Å–ª–∞–π–¥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π
- –í–∫–ª—é—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö, –Ω–∞—Å—Ç—Ä–æ–π–∫–µ, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
- –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
{
  "title": "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏",
  "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
  "slides": [
    {
      "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
      "description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è",
      "keywords": ["–∫–ª—é—á–µ–≤–æ–µ", "—Å–ª–æ–≤–æ"]
    }
  ]
}"""

    structure_response = await call_qwen_api(structure_prompt, 3000)
    logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–ª—É—á–µ–Ω–∞")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
        start_idx = structure_response.find('{')
        end_idx = structure_response.rfind('}') + 1
        json_str = structure_response[start_idx:end_idx]
        structure = json.loads(json_str)
    except:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É")
        structure = {
            "title": "–ó–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ VPN-—Å–µ—Ä–≤–µ—Ä–∞",
            "description": "–£—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù",
            "slides": [
                {"title": "–í–≤–µ–¥–µ–Ω–∏–µ –≤ VPN", "description": "–û—Å–Ω–æ–≤—ã –∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å"},
                {"title": "–í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞", "description": "Xray, VLESS-Reality"},
                {"title": "–í—ã–±–æ—Ä VPS", "description": "–ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"},
                {"title": "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "description": "–ü–æ—à–∞–≥–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞"},
                {"title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤", "description": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"},
                {"title": "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "description": "–ó–∞—â–∏—Ç–∞ –∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞"},
                {"title": "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", "description": "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"},
                {"title": "–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", "description": "–ò—Ç–æ–≥–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"}
            ]
        }
    
    logger.info(f"üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞: {len(structure['slides'])} —Å–ª–∞–π–¥–æ–≤")
    
    # –®–∞–≥ 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–∞–π–¥–∞
    logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–æ–≤...")
    
    presentation = {
        "title": structure["title"],
        "description": structure.get("description", ""),
        "slides": [],
        "metadata": {
            "created_by": "OpenManus SlidesMode v2.0 + Qwen",
            "model": MODEL,
            "created_at": datetime.now().isoformat(),
            "topic": "VPN-—Å–µ—Ä–≤–µ—Ä —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù"
        }
    }
    
    for i, slide_info in enumerate(structure["slides"], 1):
        logger.info(f"   üîÑ –°–ª–∞–π–¥ {i}: {slide_info['title']}")
        
        content_prompt = f"""–°–æ–∑–¥–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Å–ª–∞–π–¥–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ VPN-—Å–µ—Ä–≤–µ—Ä–µ.

–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞: {slide_info['title']}
–û–ø–∏—Å–∞–Ω–∏–µ: {slide_info['description']}
–û–±—â–∞—è —Ç–µ–º–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏: –ó–∞–ø—É—Å–∫ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ VPN-—Å–µ—Ä–≤–µ—Ä–∞, —É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º –†–ö–ù

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°–æ–∑–¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
- –í–∫–ª—é—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∫–æ–º–∞–Ω–¥—ã, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–¥–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã, —Å–ø–∏—Å–∫–∏, —Ü–∏—Ç–∞—Ç—ã, –∫–æ–¥
- –î–æ–±–∞–≤—å –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –¥–æ–∫–ª–∞–¥—á–∏–∫–∞
- –û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
{{
  "title": "–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∞–π–¥–∞",
  "content": [
    {{"type": "paragraph", "text": "–¢–µ–∫—Å—Ç –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞"}},
    {{"type": "bullet_point", "text": "–ü—É–Ω–∫—Ç —Å–ø–∏—Å–∫–∞"}},
    {{"type": "code", "language": "bash", "text": "–∫–æ–º–∞–Ω–¥–∞"}},
    {{"type": "quote", "text": "–¶–∏—Ç–∞—Ç–∞", "author": "–ê–≤—Ç–æ—Ä"}}
  ],
  "notes": "–ó–∞–º–µ—Ç–∫–∏ –¥–ª—è –¥–æ–∫–ª–∞–¥—á–∏–∫–∞"
}}"""

        content_response = await call_qwen_api(content_prompt, 2000)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        try:
            start_idx = content_response.find('{')
            end_idx = content_response.rfind('}') + 1
            json_str = content_response[start_idx:end_idx]
            slide_content = json.loads(json_str)
        except:
            logger.warning(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–ª–∞–π–¥–∞ {i}")
            slide_content = {
                "title": slide_info['title'],
                "content": [
                    {"type": "paragraph", "text": slide_info['description']},
                    {"type": "paragraph", "text": content_response[:500] + "..."}
                ],
                "notes": "–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å –æ—à–∏–±–∫–æ–π –ø–∞—Ä—Å–∏–Ω–≥–∞"
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
        slide_content["image_url"] = f"https://images.unsplash.com/photo-1558494949-ef010cbdcc31?w=800&h=600&fit=crop"
        
        presentation["slides"].append(slide_content)
        logger.info(f"   ‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç —Å–ª–∞–π–¥–∞ {i} —Å–æ–∑–¥–∞–Ω")
    
    # –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏...")
    
    # JSON
    json_path = "/home/ubuntu/openmanus_project/qwen_vpn_presentation.json"
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(presentation, f, indent=2, ensure_ascii=False)
    
    # HTML
    html_content = generate_html(presentation)
    html_path = "/home/ubuntu/openmanus_project/qwen_vpn_presentation.html"
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    end_time = time.time()
    total_time = end_time - start_time
    
    logger.info("üéâ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    logger.info(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {total_time:.2f} —Å–µ–∫—É–Ω–¥")
    logger.info(f"üìÅ –§–∞–π–ª—ã:")
    logger.info(f"   üìÑ JSON: {json_path}")
    logger.info(f"   üåê HTML: {html_path}")
    logger.info(f"   üìä –õ–æ–≥: {log_filename}")
    
    return {
        "success": True,
        "presentation": presentation,
        "execution_time": total_time,
        "log_file": log_filename,
        "files": {
            "json": json_path,
            "html": html_path
        }
    }

def generate_html(presentation):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –∏–∑ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    
    title = presentation.get('title', '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è')
    description = presentation.get('description', '')
    
    html = f"""<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }}
        .title-page {{ text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                      color: white; padding: 60px 40px; border-radius: 15px; margin-bottom: 30px; }}
        .title-page h1 {{ font-size: 2.5em; margin-bottom: 20px; }}
        .slide {{ background: white; margin: 20px 0; padding: 30px; border-radius: 10px; 
                  box-shadow: 0 4px 15px rgba(0,0,0,0.1); page-break-after: always; }}
        .slide h2 {{ color: #2c3e50; border-bottom: 3px solid #3498db; padding-bottom: 10px; }}
        .slide img {{ max-width: 100%; height: auto; margin: 20px 0; border-radius: 8px; }}
        .notes {{ background: #f8f9fa; padding: 15px; margin-top: 20px; border-left: 4px solid #3498db; 
                  font-style: italic; border-radius: 5px; }}
        ul {{ margin: 15px 0; }}
        li {{ margin: 8px 0; }}
        pre {{ background: #2c3e50; color: #ecf0f1; padding: 15px; border-radius: 5px; overflow-x: auto; }}
        blockquote {{ border-left: 4px solid #e74c3c; margin: 20px 0; padding: 15px 20px; 
                      background: #fdf2f2; font-style: italic; }}
        .quote-author {{ text-align: right; font-weight: bold; color: #e74c3c; margin-top: 10px; }}
    </style>
</head>
<body>
    <div class="title-page">
        <h1>{title}</h1>
        {f'<p>{description}</p>' if description else ''}
        <p style="margin-top: 30px; opacity: 0.8;">–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é OpenManus SlidesMode v2.0 + Qwen</p>
    </div>
"""
    
    for i, slide in enumerate(presentation.get('slides', []), 1):
        html += f'    <div class="slide">\n'
        html += f'        <h2>–°–ª–∞–π–¥ {i}: {slide.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")}</h2>\n'
        
        if slide.get('image_url'):
            html += f'        <img src="{slide.get("image_url")}" alt="Slide Image">\n'
        
        for item in slide.get('content', []):
            item_type = item.get('type', 'paragraph')
            text = item.get('text', '')
            
            if item_type == 'bullet_point':
                html += f'        <ul><li>{text}</li></ul>\n'
            elif item_type == 'paragraph':
                html += f'        <p>{text}</p>\n'
            elif item_type == 'code':
                language = item.get('language', '')
                html += f'        <pre><code class="{language}">{text}</code></pre>\n'
            elif item_type == 'quote':
                author = item.get('author', '')
                html += f'        <blockquote>{text}'
                if author:
                    html += f'<div class="quote-author">‚Äî {author}</div>'
                html += '</blockquote>\n'
        
        if slide.get('notes'):
            html += f'        <div class="notes"><strong>–ó–∞–º–µ—Ç–∫–∏:</strong> {slide.get("notes")}</div>\n'
        
        html += '    </div>\n'
    
    html += '</body>\n</html>'
    return html

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ó–∞–ø—É—Å–∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ —Å Qwen...")
    result = await generate_vpn_presentation()
    
    if result and result.get("success"):
        print("\n‚úÖ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìä –í—Ä–µ–º—è: {result['execution_time']:.2f} —Å–µ–∫")
        print(f"üìÅ –õ–æ–≥: {result['log_file']}")
    else:
        print("\n‚ùå –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π!")

if __name__ == "__main__":
    asyncio.run(main())

